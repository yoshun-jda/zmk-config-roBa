#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <18 19>;
        };

        muhennkann {
            bindings = <&bracket_to_obsidian INT_MUHENKAN>;
            key-positions = <30 31>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
        };

        kana {
            bindings = <&kp INT_KANA>;
            key-positions = <24 25>;
        };

        obsidian_bracket {
            bindings = <&bracket_to_obsidian>;
            key-positions = <12 13>;
        };
    };

    macros {
        bracket_to_obsidian: to_layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_press>, <&kp F &kp D>;

            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&bracket_to_obsidian>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LG(SEMICOLON) TAB  &kp C        &kp U           &kp Y           &kp P                                               &kp V            &kp D            &kp H            &kp G        &kp J
&mt LEFT_SHIFT A       &mt LCTRL O  &mt LEFT_GUI E  &mt LEFT_ALT I  &kp PERIOD   &kp LS(LG(SQT))      &kp MINUS         &kp K            &mt RIGHT_ALT T  &mt RIGHT_GUI N  &mt RCTRL S  &mt RIGHT_SHIFT R
&kp Q                  &kp X        &kp COMMA       &kp Z           &kp SLASH    &kp COLON            &kp SEMICOLON     &kp F            &kp W            &kp M            &kp B        &kp L
&kp LEFT_SHIFT         &kp LCTRL    &kp LEFT_ALT    &lt 5 LANG1     &lt 1 SPACE  &lt 2 ENTER          &lt 3 LANGUAGE_2  &lt 4 BACKSPACE                                                 &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        NUM_SIMBOL {
            bindings = <
&kp TILDE                   &kp LS(KP_NUMBER_7)  &kp LS(KP_NUMBER_8)  &kp LS(KP_NUMBER_9)  &kp LS(KP_NUMBER_0)                                             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp LEFT_BRACE    &kp RIGHT_BRACE
&kp GRAVE                   &kp LS(KP_NUMBER_4)  &kp LS(KP_NUMBER_5)  &kp LS(KP_NUMBER_6)  &kp LESS_THAN        &kp LC(LA(KP_NUMBER_0))      &kp QUESTION  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&mt LEFT_SHIFT KP_NUMBER_0  &kp LS(KP_N1)        &kp LS(KP_NUMBER_2)  &kp LS(KP_NUMBER_3)  &kp GREATER_THAN     &kp EQUAL                    &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS          &kp PIPE
&kp MINUS                   &trans               &trans               &trans               &trans               &trans                       &none         &none                                                       &kp BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        ARROW {
            bindings = <
&kp F1          &kp F2                  &kp F3                &kp LG(LS(NUMBER_2))   &kp LS(LG(NUMBER_4))                      &kp F8          &kp F10         &kp F11    &kp F12          &trans
&kp HOME        &kp LEFT_ARROW          &mt LCTRL LEFT_ARROW  &mt LEFT_GUI UP_ARROW  &mt LEFT_ALT RIGHT    &trans      &trans  &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT  &kp RIGHT_SHIFT  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans                &kp DOWN_ARROW         &trans                &trans      &trans  &trans          &kp DOWN_ARROW  &trans     &trans           &trans
&trans          &trans                  &trans                &trans                 &trans                &trans      &trans  &kp RIGHT_GUI                                               &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SHORTCUT {
            bindings = <
&trans      &kp ESCAPE  &kp LS(LG(NUMBER_2))  &kp LG(LC(R))         &kp LS(LG(NUMBER_4))                           &none   &trans  &kp RG(N7)  &kp RG(N8)  &kp RG(N9)
&trans      &trans      &kp LS(LESS_THAN)     &kp LS(GREATER_THAN)  &trans                &trans      &trans       &trans  &trans  &trans      &trans      &trans
&trans      &trans      &trans                &trans                &trans                &trans      &bootloader  &trans  &trans  &trans      &trans      &bootloader
&sys_reset  &trans      &trans                &trans                &trans                &trans      &trans       &trans                                  &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
